<?xml version="1.0"?>
<robot name="differential_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.203125 0.23828125 0.28515625 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.80078125 0.12890625 0.1328125 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  
  <gazebo reference="base_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="cover_link">
    <material>Gazebo/Orange</material>
  </gazebo>
  <!-- <gazebo reference="Hokuyo_link">
    <material>Gazebo/Blue</material>
  </gazebo> -->
  <gazebo reference="kinect_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="link_left_wheel">
    <material>Gazebo/Black</material>
  </gazebo>
  <gazebo reference="link_right_wheel">
    <material>Gazebo/Black</material>
  </gazebo>
  
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>joint_left_wheel</leftJoint>
      <rightJoint>joint_right_wheel</rightJoint>
      <wheelSeparation>0.4</wheelSeparation>
      <wheelDiameter>0.1</wheelDiameter>
      <torque>0.1</torque>
      <publishOdomTF>true</publishOdomTF>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
    </plugin>
  </gazebo>

<!-- IMU -->
  <gazebo>
      <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <bodyName>imu_link</bodyName>
        <frameName>imu_link</frameName>
        <topicName>imu</topicName>
        <serviceName>imu_service</serviceName>
        <gaussianNoise>0.0</gaussianNoise>
        <updateRate>0</updateRate>
        <imu>
          <noise>
            <type>gaussian</type>
            <rate>
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </rate>
            <accel>
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </accel>
          </noise>
        </imu>
      </plugin>
    </gazebo>

   <!-- it's better to define them once at the beginning and just refer to them throughout the rest of the file. It's more concise and if you ever want to change a material's definition, you have just one place to chang -->
   <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0.092 0 0.08" rpy="0 0 0"/>
  </joint>

  <link name="imu_link"/>
  
  <!-- base link -->

    <link name="base_link">
    <!-- pose and inertial -->
    <inertial>
      <origin
        xyz="0.0 0.0 0.03"
        rpy="0 0 0" />
      <mass
        value="4.5" />
      <inertia
        ixx="0.018771"
        ixy="4.3757E-09"
        ixz="0.00017048"
        iyy="0.03253"
        iyz="1.7492E-11"
        izz="0.04738" />
    </inertial>
    <visual>
      <origin
        xyz="0 0 0.03"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://differential_robot/meshes/base_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="0.66667 0.69804 0.76471 1" />
      </material>
    </visual>
    <collision>
      <origin
        xyz="0 0 0.03"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://differential_robot/meshes/base_link.STL" />
      </geometry>
    </collision>

    <!-- caster front -->
    <collision name="caster_front_collision">
      <origin xyz="0.2 0 0.02" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="caster_front_visual">
      <origin xyz="0.2 0 0.02" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
       </visual>
      <!-- caster behind -->
       <collision name="caster_front_collision">
      <origin xyz="-0.2 0 0.02" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
      <surface>
        <friction>
          <ode>
            <mu>0</mu>
            <mu2>0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
          </ode>
        </friction>
      </surface>
    </collision>
    <visual name="caster_front_visual">
      <origin xyz="-0.2 0 0.02" rpy="0 0 0"/>
      <geometry>
        <sphere radius="0.02"/>
      </geometry>
       </visual>
  </link>

  <link
    name="cover_link">
    <inertial>
      <origin
        xyz="-4.6126E-06 -9.9142E-06 -0.015363"
        rpy="0 0 0" />
      <mass
        value="0.453" />
      <inertia
        ixx="0.0046528"
        ixy="-1.3363E-18"
        ixz="-7.2541E-19"
        iyy="0.007642"
        iyz="-1.6397E-19"
        izz="0.012232" />
    </inertial>
    <visual>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://differential_robot/meshes/cover_link.STL" />
      </geometry>
      <material
        name="">
        <color
          rgba="1 0.54902 0 1" />
      </material>
    </visual>
    <collision>
      <origin
        xyz="0 0 0"
        rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://differential_robot/meshes/cover_link.STL" />
      </geometry>
    </collision>
  </link>

  <joint
    name="cover_joint"
    type="fixed">
    <origin
      xyz="0 0 0.245"
      rpy="0 0 3.1416" />
    <parent
      link="base_link" />
    <child
      link="cover_link" />
    <axis
      xyz="0 0 0" />
  </joint>


  <!-- VLP-16 -->
  <joint name="VLP_mount_joint" type="fixed">
      <origin
      xyz="0 0 0.2"
      rpy="0 0 3.1416" />
      <parent link="base_link"/>
      <child link="VLP_mount"/>
    </joint>

    <link name="VLP_mount">
      <inertial>
        <mass value="0.83"/>
        <origin xyz="0 0 0.3585"/>
        <inertia ixx="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" ixy="0" ixz="0"
          iyy="${(0.83 * (3.0*0.0516*0.0516 + 0.0717*0.0717)) / 12.0}" iyz="0"
          izz="${0.5 * 0.83 * (0.0516*0.0516)}"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="package://differential_robot/meshes/sensors/VLP16_base_1.dae" />
        </geometry>
      </visual>
      <visual>
        <geometry>
          <mesh filename="package://differential_robot/meshes/sensors/VLP16_base_2.dae" />
        </geometry>
      </visual>
      <collision>
        <origin rpy="0 0 0" xyz="0 0 0.3585"/>
        <geometry>
          <cylinder radius="0.0516" length="0.0717"/>
        </geometry>
      </collision>
    </link>

    <joint name="VLP_joint" type="fixed" >
      <origin xyz="0 0 0.0377" rpy="0 0 0" />
      <parent link="VLP_mount" />
      <child link="velodyne"/>
    </joint>

    <link name="velodyne">
      <inertial>
        <mass value="0.01"/>
        <origin xyz="0 0 0"/>
        <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
      </inertial>
      <visual>
        <origin xyz="0 0 -0.0377" />
        <geometry>
          <mesh filename="package://differential_robot/meshes/sensors/VLP16_scan.dae" />
        </geometry>
      </visual>
    </link>

    <!-- Gazebo requires the velodyne_gazebo_plugins package -->
    <gazebo reference="velodyne">
      <!-- type: {ray | gpu_ray} -->
        <sensor type="ray" name="velodyne_16"> 
          <pose>0 0 0 0 0 0</pose>
          <visualize>false</visualize>
          <update_rate>10</update_rate>
          <ray>
            <scan>
              <horizontal>
                <samples>1875</samples>
                <resolution>1</resolution>
                <min_angle>-3.1415926535897931</min_angle>
                <max_angle>3.1415926535897931</max_angle>
              </horizontal>
              <vertical>
                <samples>16</samples>
                <resolution>1</resolution>
                <min_angle>-15.0*3.1415926535897931/180.0</min_angle>
                <max_angle>15.0*3.1415926535897931/180.0</max_angle>
              </vertical>
            </scan>
            <range>
              <min>0.3</min>
              <max>131.0</max>
              <resolution>0.001</resolution>
            </range>
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.0</stddev>
            </noise>
          </ray>
          <!-- filename="libgazebo_ros_velodyne_gpu_laser.so" -->
          <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_velodyne_laser.so">
            <topicName>velodyne_points</topicName>
            <frameName>base_link</frameName>
            <min_range>0.9</min_range>
            <max_range>130.0</max_range>
            <gaussianNoise>0.008</gaussianNoise>
          </plugin>
        </sensor>
    </gazebo>


  <!-- KINECT V2 -->
     <joint name="kinect_rgb_joint" type="fixed">
              <origin xyz="0.3 0 0.3" rpy="0 0 0" />
               <parent link="kinect_link"/>
               <child link="kinect_rgb_frame" />
          </joint>

          <link name="kinect_rgb_frame">
               <inertial>
                    <mass value="0.001" />
                    <origin xyz="0 0 0" />
                    <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
               </inertial>
          </link>

          <joint name="kinect_rgb_optical_joint" type="fixed">
               <origin xyz="0 0 0" rpy="-1.570796326795 0 -1.570796326795" />
               <parent link="kinect_rgb_frame" />
               <child link="kinect_rgb_optical_frame" />
          </joint>

          <link name="kinect_rgb_optical_frame">
               <inertial>
                    <mass value="0.001" />
                    <origin xyz="0 0 0" />
                    <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
               </inertial>
          </link>

          <joint name="kinect_joint" type="fixed">
              <origin xyz="0.3 0.0 0.3" rpy="0 0 0"/>
              <parent link="base_link"/>
              <child link="kinect_link"/>
          </joint>

          <link name="kinect_link">
               <visual>
                    <origin xyz="0 0 0" rpy="0 0 1.570796326795"/>
                    <geometry>
                              <mesh filename="package://differential_robot/meshes/sensors/kinectv2.dae"/>
                    </geometry>
                    <!-- <material name="black"/> -->
               </visual>
               <collision>

                         <origin xyz="0.0471 0.125 0.03225" rpy="0 0 0"/>
                         <geometry>
                              <box size="0.0943 0.25 0.0645"/>
                         </geometry>
  
                    
               </collision>
               <inertial>
                    <mass value="0.001" />
                    <origin xyz="0 0 0" />
                    <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
               </inertial>
          </link>

          <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch
          files. However, for Gazebo simulation we need them, so we add them here.
          (Hence, don't publish them additionally!) -->
          <joint name="kinect_depth_joint" type="fixed">
               <origin xyz="0 0 0" rpy="0 0 0" />
               <parent link="kinect_link" />
               <child link="kinect_depth_frame" />
          </joint>

          <link name="kinect_depth_frame">
               <inertial>
                    <mass value="0.001" />
                    <origin xyz="0 0 0" />
                    <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
               </inertial>
          </link>

          <joint name="kinect_depth_optical_joint" type="fixed">
               <origin xyz="0 0 0" rpy="1.570796326795 0 1.570796326795" />
               <parent link="kinect_depth_frame" />
               <child link="kinect_depth_optical_frame" />
          </joint>
          <!-- 3.14159265359 -->
          <link name="kinect_depth_optical_frame">
               <inertial>
                    <mass value="0.001" />
                    <origin xyz="0 0 0" />
                    <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
               </inertial>
          </link>

          <!-- Kinect sensor for simulation -->
          <!-- <sensor_kinectv2_gazebo/> -->
          <!-- <xacro:color_gazebo parent="kinect_link" color="orange"/> -->

          <gazebo reference="kinect_link">
               <sensor type="depth" name="kinect_sensor">
                    <always_on>true</always_on>
                    <visualize>true</visualize>
                    <update_rate>20.0</update_rate>

                    <camera>
                         <horizontal_fov>1.047197551</horizontal_fov>
                         <image>
                              <format>R8G8B8</format>
                              <width>640</width>
                              <height>480</height>
                         </image>
                         <clip>
                              <near>0.05</near>
                              <far>8.0</far>
                         </clip>
                    </camera>

                    <plugin name="kinect_controller" filename="libgazebo_ros_openni_kinect.so">
                         <cameraName>kinect</cameraName>
                         <alwaysOn>true</alwaysOn>
                         <visualize>true</visualize>
                         <updateRate>10</updateRate>
                         <imageTopicName>rgb/image_raw</imageTopicName>
                         <depthImageTopicName>depth/image_raw</depthImageTopicName>
                         <pointCloudTopicName>depth/points</pointCloudTopicName>
                         <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
                         <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
                         <frameName>base_link</frameName>
                         <baseline>0.1</baseline>
                         <distortion_k1>0.0</distortion_k1>
                         <distortion_k2>0.0</distortion_k2>
                         <distortion_k3>0.0</distortion_k3>
                         <distortion_t1>0.0</distortion_t1>
                         <distortion_t2>0.0</distortion_t2>
                         <pointCloudCutoff>0.4</pointCloudCutoff>
                         <pointCloudCutoffMax>5.0</pointCloudCutoffMax>
                    </plugin>
               </sensor>
          </gazebo>


    <!-- HOKUYO LIDAR -->
    <gazebo reference="Hokuyo_link">
    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0.31 0.0 0.21 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>30</update_rate>
      <always_on>1</always_on>
      <ray>
        <scan>
          <horizontal>
            <!-- <samples>180</samples> -->
            <samples>20</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
            <!-- <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle> -->
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>scan</topicName>
        <frameName>base_link</frameName>
      </plugin>
      <!-- <always_on>1</always_on> -->
    </sensor>
  </gazebo>

  <link name="Hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://differential_robot/meshes/sensors/hokuyo.dae" scale="2 2 2"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.1" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="scan_joint" type="fixed">
    <parent link="base_link"/>
    <child link="Hokuyo_link"/>
    <origin xyz="0.31 0 0.21" rpy="0 0 0"/>
  </joint>

  <!-- <joint name="hokuyo_joint" type="fixed">
    <axis xyz="0 0 1" />
    <origin xyz="0 0.22 0.05" rpy="0 0 1.570796"/>
    <parent link="base_link"/>
    <child link="Hokuyo_link"/>
  </joint> -->


  <!-- right wheel -->
  <link name="link_right_wheel">
    <inertial>
      <mass value="1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.145833" ixy="0" ixz="0" iyy="0.145833" iyz="0" izz="0.125"/>
    </inertial>
    <collision name="link_right_wheel_collision">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.03"/>
      </geometry>
    </collision>
    <visual name="link_right_wheel_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.03"/>
      </geometry>
      <material name="grey"/>
    </visual>
  </link>
  
  <!-- joint_right_wheel -->
  <joint name="joint_right_wheel" type="revolute">
    <parent link="base_link"/>
    <child link="link_right_wheel"/>
    <origin xyz="0.0 -0.20918 0.05" rpy="-1.57265  0       0"/>
    <axis xyz="0 0 1"/>
    <limit lower="-1.79769e+308" upper="1.79769e+308" effort="-1.0" velocity="-1.0"/>
  </joint>
  
  <!-- left wheel -->
   <link name="link_left_wheel">
    <inertial>
      <mass value="1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.145833" ixy="0" ixz="0" iyy="0.145833" iyz="0" izz="0.125"/>
    </inertial>
    <collision name="wheel_left_collilink_left_wheel_collisionsion">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.03"/>
      </geometry>
    </collision>
    <visual name="link_left_wheel_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.05" length="0.03"/>
      </geometry>
      <material name="grey"/>
    </visual>
  </link>
  
  <!-- joint_left_wheel -->
  <joint name="joint_left_wheel" type="revolute">
    <parent link="base_link"/>
    <child link="link_left_wheel"/>
    <origin xyz="-0.0  0.20918 0.05" rpy="-1.57265  0       0"/>
    <axis xyz="0  0 1"/>
    <limit lower="-1.79769e+308" upper="1.79769e+308" effort="-1.0" velocity="-1.0"/>
  </joint>


</robot>